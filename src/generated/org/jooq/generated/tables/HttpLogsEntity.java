/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.LockrEntity;
import org.jooq.generated.tables.records.HttpLogsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HttpLogsEntity extends TableImpl<HttpLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lockr.http_logs</code>
     */
    public static final HttpLogsEntity HTTP_LOGS = new HttpLogsEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HttpLogsRecord> getRecordType() {
        return HttpLogsRecord.class;
    }

    /**
     * The column <code>lockr.http_logs.id</code>. 고유한 로그 ID (UUID)
     */
    public final TableField<HttpLogsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(128).nullable(false), this, "고유한 로그 ID (UUID)");

    /**
     * The column <code>lockr.http_logs.root_guid</code>. 루트 GUID (ULID)
     */
    public final TableField<HttpLogsRecord, String> ROOT_GUID = createField(DSL.name("root_guid"), SQLDataType.VARCHAR(128).nullable(false), this, "루트 GUID (ULID)");

    /**
     * The column <code>lockr.http_logs.child_guid</code>. 자식 GUID (ULID)
     */
    public final TableField<HttpLogsRecord, String> CHILD_GUID = createField(DSL.name("child_guid"), SQLDataType.VARCHAR(128).nullable(false), this, "자식 GUID (ULID)");

    /**
     * The column <code>lockr.http_logs.tx_date</code>. 로그 기록 날짜
     */
    public final TableField<HttpLogsRecord, String> TX_DATE = createField(DSL.name("tx_date"), SQLDataType.VARCHAR(24).nullable(false), this, "로그 기록 날짜");

    /**
     * The column <code>lockr.http_logs.tx_time</code>. 로그 기록 시간
     */
    public final TableField<HttpLogsRecord, String> TX_TIME = createField(DSL.name("tx_time"), SQLDataType.VARCHAR(24), this, "로그 기록 시간");

    /**
     * The column <code>lockr.http_logs.client_ip</code>. 요청을 보낸 클라이언트의 IP 주소
     */
    public final TableField<HttpLogsRecord, String> CLIENT_IP = createField(DSL.name("client_ip"), SQLDataType.VARCHAR(45).nullable(false), this, "요청을 보낸 클라이언트의 IP 주소");

    /**
     * The column <code>lockr.http_logs.user_id</code>. 요청 보낸 사용자의 고유 ID (인증되지
     * 않은 경우 NULL)
     */
    public final TableField<HttpLogsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(128), this, "요청 보낸 사용자의 고유 ID (인증되지 않은 경우 NULL)");

    /**
     * The column <code>lockr.http_logs.http_method</code>. HTTP 요청 메소드 (GET,
     * POST 등)
     */
    public final TableField<HttpLogsRecord, String> HTTP_METHOD = createField(DSL.name("http_method"), SQLDataType.VARCHAR(10).nullable(false), this, "HTTP 요청 메소드 (GET, POST 등)");

    /**
     * The column <code>lockr.http_logs.path</code>. 요청된 경로
     */
    public final TableField<HttpLogsRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(255).nullable(false), this, "요청된 경로");

    /**
     * The column <code>lockr.http_logs.status_code</code>. HTTP 응답 상태 코드 (200,
     * 404, 500 등)
     */
    public final TableField<HttpLogsRecord, Short> STATUS_CODE = createField(DSL.name("status_code"), SQLDataType.SMALLINT.nullable(false), this, "HTTP 응답 상태 코드 (200, 404, 500 등)");

    /**
     * The column <code>lockr.http_logs.headers</code>. 요청 헤더 정보
     */
    public final TableField<HttpLogsRecord, JSON> HEADERS = createField(DSL.name("headers"), SQLDataType.JSON, this, "요청 헤더 정보");

    /**
     * The column <code>lockr.http_logs.body</code>. 요청 본문 (민감 정보 마스킹 필요)
     */
    public final TableField<HttpLogsRecord, JSON> BODY = createField(DSL.name("body"), SQLDataType.JSON, this, "요청 본문 (민감 정보 마스킹 필요)");

    private HttpLogsEntity(Name alias, Table<HttpLogsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HttpLogsEntity(Name alias, Table<HttpLogsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lockr.http_logs</code> table reference
     */
    public HttpLogsEntity(String alias) {
        this(DSL.name(alias), HTTP_LOGS);
    }

    /**
     * Create an aliased <code>lockr.http_logs</code> table reference
     */
    public HttpLogsEntity(Name alias) {
        this(alias, HTTP_LOGS);
    }

    /**
     * Create a <code>lockr.http_logs</code> table reference
     */
    public HttpLogsEntity() {
        this(DSL.name("http_logs"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LockrEntity.LOCKR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HTTP_LOGS_IDX_CHILD_GUID, Indexes.HTTP_LOGS_IDX_CLIENT_IP, Indexes.HTTP_LOGS_IDX_ROOT_GUID, Indexes.HTTP_LOGS_IDX_TX_DATE, Indexes.HTTP_LOGS_IDX_TX_TIME, Indexes.HTTP_LOGS_IDX_USER_ID);
    }

    @Override
    public UniqueKey<HttpLogsRecord> getPrimaryKey() {
        return Keys.KEY_HTTP_LOGS_PRIMARY;
    }

    @Override
    public HttpLogsEntity as(String alias) {
        return new HttpLogsEntity(DSL.name(alias), this);
    }

    @Override
    public HttpLogsEntity as(Name alias) {
        return new HttpLogsEntity(alias, this);
    }

    @Override
    public HttpLogsEntity as(Table<?> alias) {
        return new HttpLogsEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HttpLogsEntity rename(String name) {
        return new HttpLogsEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HttpLogsEntity rename(Name name) {
        return new HttpLogsEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HttpLogsEntity rename(Table<?> name) {
        return new HttpLogsEntity(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HttpLogsEntity where(Condition condition) {
        return new HttpLogsEntity(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HttpLogsEntity where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HttpLogsEntity where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HttpLogsEntity where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HttpLogsEntity where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HttpLogsEntity where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HttpLogsEntity where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HttpLogsEntity where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HttpLogsEntity whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HttpLogsEntity whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
