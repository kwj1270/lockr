/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;

import org.jooq.JSON;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HttpLogs implements Serializable {

    private static final long serialVersionUID = 1L;

    private String id;
    private String rootGuid;
    private String childGuid;
    private String txDate;
    private String txTime;
    private String clientIp;
    private String userId;
    private String httpMethod;
    private String path;
    private Short statusCode;
    private JSON headers;
    private JSON body;

    public HttpLogs() {}

    public HttpLogs(HttpLogs value) {
        this.id = value.id;
        this.rootGuid = value.rootGuid;
        this.childGuid = value.childGuid;
        this.txDate = value.txDate;
        this.txTime = value.txTime;
        this.clientIp = value.clientIp;
        this.userId = value.userId;
        this.httpMethod = value.httpMethod;
        this.path = value.path;
        this.statusCode = value.statusCode;
        this.headers = value.headers;
        this.body = value.body;
    }

    public HttpLogs(
        String id,
        String rootGuid,
        String childGuid,
        String txDate,
        String txTime,
        String clientIp,
        String userId,
        String httpMethod,
        String path,
        Short statusCode,
        JSON headers,
        JSON body
    ) {
        this.id = id;
        this.rootGuid = rootGuid;
        this.childGuid = childGuid;
        this.txDate = txDate;
        this.txTime = txTime;
        this.clientIp = clientIp;
        this.userId = userId;
        this.httpMethod = httpMethod;
        this.path = path;
        this.statusCode = statusCode;
        this.headers = headers;
        this.body = body;
    }

    /**
     * Getter for <code>lockr.http_logs.id</code>. 고유한 로그 ID (UUID)
     */
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>lockr.http_logs.id</code>. 고유한 로그 ID (UUID)
     */
    public HttpLogs setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.root_guid</code>. 루트 GUID (ULID)
     */
    public String getRootGuid() {
        return this.rootGuid;
    }

    /**
     * Setter for <code>lockr.http_logs.root_guid</code>. 루트 GUID (ULID)
     */
    public HttpLogs setRootGuid(String rootGuid) {
        this.rootGuid = rootGuid;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.child_guid</code>. 자식 GUID (ULID)
     */
    public String getChildGuid() {
        return this.childGuid;
    }

    /**
     * Setter for <code>lockr.http_logs.child_guid</code>. 자식 GUID (ULID)
     */
    public HttpLogs setChildGuid(String childGuid) {
        this.childGuid = childGuid;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.tx_date</code>. 로그 기록 날짜
     */
    public String getTxDate() {
        return this.txDate;
    }

    /**
     * Setter for <code>lockr.http_logs.tx_date</code>. 로그 기록 날짜
     */
    public HttpLogs setTxDate(String txDate) {
        this.txDate = txDate;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.tx_time</code>. 로그 기록 시간
     */
    public String getTxTime() {
        return this.txTime;
    }

    /**
     * Setter for <code>lockr.http_logs.tx_time</code>. 로그 기록 시간
     */
    public HttpLogs setTxTime(String txTime) {
        this.txTime = txTime;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.client_ip</code>. 요청을 보낸 클라이언트의 IP 주소
     */
    public String getClientIp() {
        return this.clientIp;
    }

    /**
     * Setter for <code>lockr.http_logs.client_ip</code>. 요청을 보낸 클라이언트의 IP 주소
     */
    public HttpLogs setClientIp(String clientIp) {
        this.clientIp = clientIp;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.user_id</code>. 요청 보낸 사용자의 고유 ID (인증되지
     * 않은 경우 NULL)
     */
    public String getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>lockr.http_logs.user_id</code>. 요청 보낸 사용자의 고유 ID (인증되지
     * 않은 경우 NULL)
     */
    public HttpLogs setUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.http_method</code>. HTTP 요청 메소드 (GET,
     * POST 등)
     */
    public String getHttpMethod() {
        return this.httpMethod;
    }

    /**
     * Setter for <code>lockr.http_logs.http_method</code>. HTTP 요청 메소드 (GET,
     * POST 등)
     */
    public HttpLogs setHttpMethod(String httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.path</code>. 요청된 경로
     */
    public String getPath() {
        return this.path;
    }

    /**
     * Setter for <code>lockr.http_logs.path</code>. 요청된 경로
     */
    public HttpLogs setPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.status_code</code>. HTTP 응답 상태 코드 (200,
     * 404, 500 등)
     */
    public Short getStatusCode() {
        return this.statusCode;
    }

    /**
     * Setter for <code>lockr.http_logs.status_code</code>. HTTP 응답 상태 코드 (200,
     * 404, 500 등)
     */
    public HttpLogs setStatusCode(Short statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.headers</code>. 요청 헤더 정보
     */
    public JSON getHeaders() {
        return this.headers;
    }

    /**
     * Setter for <code>lockr.http_logs.headers</code>. 요청 헤더 정보
     */
    public HttpLogs setHeaders(JSON headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.body</code>. 요청 본문 (민감 정보 마스킹 필요)
     */
    public JSON getBody() {
        return this.body;
    }

    /**
     * Setter for <code>lockr.http_logs.body</code>. 요청 본문 (민감 정보 마스킹 필요)
     */
    public HttpLogs setBody(JSON body) {
        this.body = body;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final HttpLogs other = (HttpLogs) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.rootGuid == null) {
            if (other.rootGuid != null)
                return false;
        }
        else if (!this.rootGuid.equals(other.rootGuid))
            return false;
        if (this.childGuid == null) {
            if (other.childGuid != null)
                return false;
        }
        else if (!this.childGuid.equals(other.childGuid))
            return false;
        if (this.txDate == null) {
            if (other.txDate != null)
                return false;
        }
        else if (!this.txDate.equals(other.txDate))
            return false;
        if (this.txTime == null) {
            if (other.txTime != null)
                return false;
        }
        else if (!this.txTime.equals(other.txTime))
            return false;
        if (this.clientIp == null) {
            if (other.clientIp != null)
                return false;
        }
        else if (!this.clientIp.equals(other.clientIp))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.httpMethod == null) {
            if (other.httpMethod != null)
                return false;
        }
        else if (!this.httpMethod.equals(other.httpMethod))
            return false;
        if (this.path == null) {
            if (other.path != null)
                return false;
        }
        else if (!this.path.equals(other.path))
            return false;
        if (this.statusCode == null) {
            if (other.statusCode != null)
                return false;
        }
        else if (!this.statusCode.equals(other.statusCode))
            return false;
        if (this.headers == null) {
            if (other.headers != null)
                return false;
        }
        else if (!this.headers.equals(other.headers))
            return false;
        if (this.body == null) {
            if (other.body != null)
                return false;
        }
        else if (!this.body.equals(other.body))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.rootGuid == null) ? 0 : this.rootGuid.hashCode());
        result = prime * result + ((this.childGuid == null) ? 0 : this.childGuid.hashCode());
        result = prime * result + ((this.txDate == null) ? 0 : this.txDate.hashCode());
        result = prime * result + ((this.txTime == null) ? 0 : this.txTime.hashCode());
        result = prime * result + ((this.clientIp == null) ? 0 : this.clientIp.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.httpMethod == null) ? 0 : this.httpMethod.hashCode());
        result = prime * result + ((this.path == null) ? 0 : this.path.hashCode());
        result = prime * result + ((this.statusCode == null) ? 0 : this.statusCode.hashCode());
        result = prime * result + ((this.headers == null) ? 0 : this.headers.hashCode());
        result = prime * result + ((this.body == null) ? 0 : this.body.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("HttpLogs (");

        sb.append(id);
        sb.append(", ").append(rootGuid);
        sb.append(", ").append(childGuid);
        sb.append(", ").append(txDate);
        sb.append(", ").append(txTime);
        sb.append(", ").append(clientIp);
        sb.append(", ").append(userId);
        sb.append(", ").append(httpMethod);
        sb.append(", ").append(path);
        sb.append(", ").append(statusCode);
        sb.append(", ").append(headers);
        sb.append(", ").append(body);

        sb.append(")");
        return sb.toString();
    }
}
