/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.generated.tables.HttpLogsEntity;
import org.jooq.generated.tables.pojos.HttpLogs;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HttpLogsRecord extends UpdatableRecordImpl<HttpLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>lockr.http_logs.id</code>. 고유한 로그 ID (UUID)
     */
    public HttpLogsRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.id</code>. 고유한 로그 ID (UUID)
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>lockr.http_logs.root_guid</code>. 루트 GUID (ULID)
     */
    public HttpLogsRecord setRootGuid(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.root_guid</code>. 루트 GUID (ULID)
     */
    public String getRootGuid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>lockr.http_logs.child_guid</code>. 자식 GUID (ULID)
     */
    public HttpLogsRecord setChildGuid(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.child_guid</code>. 자식 GUID (ULID)
     */
    public String getChildGuid() {
        return (String) get(2);
    }

    /**
     * Setter for <code>lockr.http_logs.tx_date</code>. 로그 기록 날짜
     */
    public HttpLogsRecord setTxDate(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.tx_date</code>. 로그 기록 날짜
     */
    public String getTxDate() {
        return (String) get(3);
    }

    /**
     * Setter for <code>lockr.http_logs.tx_time</code>. 로그 기록 시간
     */
    public HttpLogsRecord setTxTime(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.tx_time</code>. 로그 기록 시간
     */
    public String getTxTime() {
        return (String) get(4);
    }

    /**
     * Setter for <code>lockr.http_logs.client_ip</code>. 요청을 보낸 클라이언트의 IP 주소
     */
    public HttpLogsRecord setClientIp(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.client_ip</code>. 요청을 보낸 클라이언트의 IP 주소
     */
    public String getClientIp() {
        return (String) get(5);
    }

    /**
     * Setter for <code>lockr.http_logs.user_id</code>. 요청 보낸 사용자의 고유 ID (인증되지
     * 않은 경우 NULL)
     */
    public HttpLogsRecord setUserId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.user_id</code>. 요청 보낸 사용자의 고유 ID (인증되지
     * 않은 경우 NULL)
     */
    public String getUserId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>lockr.http_logs.http_method</code>. HTTP 요청 메소드 (GET,
     * POST 등)
     */
    public HttpLogsRecord setHttpMethod(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.http_method</code>. HTTP 요청 메소드 (GET,
     * POST 등)
     */
    public String getHttpMethod() {
        return (String) get(7);
    }

    /**
     * Setter for <code>lockr.http_logs.path</code>. 요청된 경로
     */
    public HttpLogsRecord setPath(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.path</code>. 요청된 경로
     */
    public String getPath() {
        return (String) get(8);
    }

    /**
     * Setter for <code>lockr.http_logs.status_code</code>. HTTP 응답 상태 코드 (200,
     * 404, 500 등)
     */
    public HttpLogsRecord setStatusCode(Short value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.status_code</code>. HTTP 응답 상태 코드 (200,
     * 404, 500 등)
     */
    public Short getStatusCode() {
        return (Short) get(9);
    }

    /**
     * Setter for <code>lockr.http_logs.headers</code>. 요청 헤더 정보
     */
    public HttpLogsRecord setHeaders(JSON value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.headers</code>. 요청 헤더 정보
     */
    public JSON getHeaders() {
        return (JSON) get(10);
    }

    /**
     * Setter for <code>lockr.http_logs.body</code>. 요청 본문 (민감 정보 마스킹 필요)
     */
    public HttpLogsRecord setBody(JSON value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>lockr.http_logs.body</code>. 요청 본문 (민감 정보 마스킹 필요)
     */
    public JSON getBody() {
        return (JSON) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HttpLogsRecord
     */
    public HttpLogsRecord() {
        super(HttpLogsEntity.HTTP_LOGS);
    }

    /**
     * Create a detached, initialised HttpLogsRecord
     */
    public HttpLogsRecord(String id, String rootGuid, String childGuid, String txDate, String txTime, String clientIp, String userId, String httpMethod, String path, Short statusCode, JSON headers, JSON body) {
        super(HttpLogsEntity.HTTP_LOGS);

        setId(id);
        setRootGuid(rootGuid);
        setChildGuid(childGuid);
        setTxDate(txDate);
        setTxTime(txTime);
        setClientIp(clientIp);
        setUserId(userId);
        setHttpMethod(httpMethod);
        setPath(path);
        setStatusCode(statusCode);
        setHeaders(headers);
        setBody(body);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised HttpLogsRecord
     */
    public HttpLogsRecord(HttpLogs value) {
        super(HttpLogsEntity.HTTP_LOGS);

        if (value != null) {
            setId(value.getId());
            setRootGuid(value.getRootGuid());
            setChildGuid(value.getChildGuid());
            setTxDate(value.getTxDate());
            setTxTime(value.getTxTime());
            setClientIp(value.getClientIp());
            setUserId(value.getUserId());
            setHttpMethod(value.getHttpMethod());
            setPath(value.getPath());
            setStatusCode(value.getStatusCode());
            setHeaders(value.getHeaders());
            setBody(value.getBody());
            resetChangedOnNotNull();
        }
    }
}
