/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.JSON;
import org.jooq.generated.tables.HttpLogsEntity;
import org.jooq.generated.tables.pojos.HttpLogs;
import org.jooq.generated.tables.records.HttpLogsRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HttpLogsDao extends DAOImpl<HttpLogsRecord, HttpLogs, String> {

    /**
     * Create a new HttpLogsDao without any configuration
     */
    public HttpLogsDao() {
        super(HttpLogsEntity.HTTP_LOGS, HttpLogs.class);
    }

    /**
     * Create a new HttpLogsDao with an attached configuration
     */
    public HttpLogsDao(Configuration configuration) {
        super(HttpLogsEntity.HTTP_LOGS, HttpLogs.class, configuration);
    }

    @Override
    public String getId(HttpLogs object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfIdEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<HttpLogs> fetchByIdEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public HttpLogs fetchOneByIdEntity(String value) {
        return fetchOne(HttpLogsEntity.HTTP_LOGS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<HttpLogs> fetchOptionalByIdEntity(String value) {
        return fetchOptional(HttpLogsEntity.HTTP_LOGS.ID, value);
    }

    /**
     * Fetch records that have <code>root_guid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfRootGuidEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.ROOT_GUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>root_guid IN (values)</code>
     */
    public List<HttpLogs> fetchByRootGuidEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.ROOT_GUID, values);
    }

    /**
     * Fetch records that have <code>child_guid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfChildGuidEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.CHILD_GUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>child_guid IN (values)</code>
     */
    public List<HttpLogs> fetchByChildGuidEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.CHILD_GUID, values);
    }

    /**
     * Fetch records that have <code>tx_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfTxDateEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.TX_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tx_date IN (values)</code>
     */
    public List<HttpLogs> fetchByTxDateEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.TX_DATE, values);
    }

    /**
     * Fetch records that have <code>tx_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfTxTimeEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.TX_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tx_time IN (values)</code>
     */
    public List<HttpLogs> fetchByTxTimeEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.TX_TIME, values);
    }

    /**
     * Fetch records that have <code>client_ip BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfClientIpEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.CLIENT_IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>client_ip IN (values)</code>
     */
    public List<HttpLogs> fetchByClientIpEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.CLIENT_IP, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfUserIdEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<HttpLogs> fetchByUserIdEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.USER_ID, values);
    }

    /**
     * Fetch records that have <code>http_method BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfHttpMethodEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.HTTP_METHOD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>http_method IN (values)</code>
     */
    public List<HttpLogs> fetchByHttpMethodEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.HTTP_METHOD, values);
    }

    /**
     * Fetch records that have <code>path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfPathEntity(String lowerInclusive, String upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    public List<HttpLogs> fetchByPathEntity(String... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.PATH, values);
    }

    /**
     * Fetch records that have <code>status_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfStatusCodeEntity(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.STATUS_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status_code IN (values)</code>
     */
    public List<HttpLogs> fetchByStatusCodeEntity(Short... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.STATUS_CODE, values);
    }

    /**
     * Fetch records that have <code>headers BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfHeadersEntity(JSON lowerInclusive, JSON upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.HEADERS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>headers IN (values)</code>
     */
    public List<HttpLogs> fetchByHeadersEntity(JSON... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.HEADERS, values);
    }

    /**
     * Fetch records that have <code>body BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<HttpLogs> fetchRangeOfBodyEntity(JSON lowerInclusive, JSON upperInclusive) {
        return fetchRange(HttpLogsEntity.HTTP_LOGS.BODY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>body IN (values)</code>
     */
    public List<HttpLogs> fetchByBodyEntity(JSON... values) {
        return fetch(HttpLogsEntity.HTTP_LOGS.BODY, values);
    }
}
